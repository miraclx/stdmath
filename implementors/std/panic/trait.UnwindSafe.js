(function() {var implementors = {};
implementors["stdmath"] = [{"text":"impl&lt;T&gt; UnwindSafe for Type&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FlippedIteratorOfTypes&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, S&gt; UnwindSafe for ContextVal&lt;M, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Context&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; !UnwindSafe for TransformedValue&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; UnwindSafe for OverflowState&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, C, R&gt; UnwindSafe for ExcludedIterator&lt;B, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Factorial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()