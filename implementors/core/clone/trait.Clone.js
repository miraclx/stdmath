(function() {var implementors = {};
implementors["stdmath"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Type&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for FlippedIteratorOfTypes&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R&gt; Clone for Context&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;Clone&gt; Clone for TransformedValue&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for OverflowState&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone, C:&nbsp;Clone + Iterator, R:&nbsp;Clone&gt; Clone for ExcludedIterator&lt;B, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Factorial&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()