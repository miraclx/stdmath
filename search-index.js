var searchIndex = JSON.parse('{\
"stdmath":{"doc":"","i":[[0,"core","stdmath","",null,null],[4,"Type","stdmath::core","Provides a means to represent the state of a value.",null,null],[13,"Normal","","context        | value | identity | indirect identity …",0,null],[13,"Inverse","","context        | value | identity | indirect identity …",0,null],[11,"flip","","Inverts the state of the Type.",0,[[]]],[11,"is_inverted","","Matches the type variant, returning true if self is […",0,[[]]],[11,"unwrap","","Extracts the value contained in a variant of <code>Type</code>.",0,[[]]],[11,"map","","Transform the value within the type variant, returning …",0,[[["fn",8]],["type",4]]],[11,"as_ref","","Converts from a <code>&Type<T></code> to a <code>Type<&T></code>.",0,[[],["type",4]]],[11,"as_mut","","Converts from a <code>&mut Type<T></code> to a <code>Type<&mut T></code>.",0,[[],["type",4]]],[3,"FlippedIteratorOfTypes","","An iterator that flips the type variant of it\'s items.",null,null],[8,"Flippable","","An interface for flipping an iterator of types.",null,null],[10,"flip","","",1,[[],["flippediteratoroftypes",3]]],[8,"Simplify","","Trait for values that can be simplified.",null,null],[10,"simplify","","This method serializes <code>self</code> into any <code>file</code> that implements …",2,[[["write",8]],["result",6]]],[11,"repr","","This helper method serializes <code>self</code> into a [<code>String</code>].",2,[[],[["string",3],["error",3],["result",4]]]],[8,"Resolve","","Trait for objects that can be resolved to a value.",null,null],[16,"Result","","The result of the object resolution.",3,null],[10,"_resolve","","This method resolves <code>self</code> into it\'s equivalent [<code>Result</code>][…",3,[[["box",3]]]],[11,"resolve","","",3,[[]]],[10,"as_any","","This method transposes <code>self</code> into a dynamic [<code>Any</code>][…",3,[[],["any",8]]],[10,"is_friendly_with","","This method determines whether the type behind the …",3,[[["resolve",8]]]],[10,"_cmp","","This method partially compares <code>self</code> with the type behind …",3,[[["resolve",8]],[["ordering",4],["option",4]]]],[11,"_clone","","This method enables cloning trait objects that implements …",3,[[],[["resolve",8],["box",3]]]],[11,"_debug","","This method enables debugging trait objects that …",3,[[["formatter",3]],["result",6]]],[10,"_hash","","This method enables hashing trait objects that implements …",3,[[["hasher",8]]]],[10,"_to_context","","This method allows wrapping a resolvable value into a …",3,[[["box",3]],["context",4]]],[11,"to_context","","",3,[[],["context",4]]],[10,"_as_context","","",3,[[["box",3]],["context",4]]],[11,"as_context","","",3,[[],["context",4]]],[4,"ContextVal","","",null,null],[13,"Multiple","","",4,null],[13,"Single","","",4,null],[11,"multiple","","",4,[[],["option",4]]],[11,"single","","",4,[[],["option",4]]],[4,"Context","","",null,null],[13,"Add","","",5,null],[13,"Mul","","",5,null],[13,"Nil","","",5,null],[11,"dump","","",5,[[],[["contextval",4],["vec",3],["box",3]]]],[11,"get_ref","","",5,[[],[["vec",3],["box",3],["contextval",4]]]],[11,"is_additive","","",5,[[]]],[11,"transpose","","",5,[[]]],[11,"to_valid_or","","",5,[[]]],[11,"type_map","","",5,[[["fn",8],["clone",8]],["context",4]]],[5,"sum","","",null,[[],["context",4]]],[5,"mul","","",null,[[],["context",4]]],[3,"TransformedValue","","",null,null],[11,"new","","",6,[[["resolve",8]]]],[5,"sigma","","",null,[[["clone",8],["fn",8],["intoiterator",8]],["context",4]]],[5,"product","","",null,[[["clone",8],["fn",8],["intoiterator",8]],["context",4]]],[0,"exclude","stdmath","",null,null],[4,"OverflowState","stdmath::exclude","",null,null],[13,"Excluded","","",7,null],[13,"Included","","",7,null],[3,"ExcludedIterator","","",null,null],[11,"new","","",8,[[]]],[11,"with_transformer","","",8,[[],["excludediterator",3]]],[11,"include_overflow","","",8,[[],["excludediterator",3]]],[11,"include_overflow_with","","",8,[[],["excludediterator",3]]],[8,"ExcludedIteratorExt","","",null,null],[16,"Item","","",9,null],[11,"exclude","","",9,[[["iterator",8]],[["excludediterator",3],["iterator",8]]]],[8,"One","stdmath","Defines a multiplicative identity element for Self.",null,null],[10,"one","","",10,[[]]],[8,"Pow","","Trait for pow-supported numbers.",null,null],[16,"Output","","",11,null],[10,"pow","","",11,[[]]],[8,"Zero","","Defines a additive identity element for Self.",null,null],[10,"zero","","",12,[[]]],[5,"factorial","","",null,[[["resolve",8],["one",8]],["context",4]]],[3,"Factorial","","",null,null],[12,"0","","",13,null],[14,"stage_default_methods","","",null,null],[14,"ctx","","",null,null],[14,"mul","","",null,null],[14,"add","","",null,null],[14,"n","","",null,null],[14,"i","","",null,null],[14,"f","","",null,null],[14,"impl_ops","","",null,null],[11,"from","stdmath::core","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","stdmath::exclude","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","stdmath","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"simplify","stdmath::core","",5,[[["write",8]],["result",6]]],[11,"simplify","","",6,[[["write",8]],["result",6]]],[11,"simplify","stdmath","",13,[[["write",8]],["result",6]]],[11,"is_friendly_with","stdmath::core","",5,[[["resolve",8]]]],[11,"as_any","","",5,[[],["any",8]]],[11,"_cmp","","",5,[[["resolve",8]],[["option",4],["ordering",4]]]],[11,"_debug","","",5,[[["formatter",3]],["result",6]]],[11,"_clone","","",5,[[],[["resolve",8],["box",3]]]],[11,"_hash","","",5,[[["hasher",8]]]],[11,"_to_context","","",5,[[["box",3]],["context",4]]],[11,"_as_context","","",5,[[["box",3]],["context",4]]],[11,"_resolve","","",5,[[["box",3]]]],[11,"is_friendly_with","","",6,[[["resolve",8]]]],[11,"_to_context","","",6,[[["box",3]],["context",4]]],[11,"_as_context","","",6,[[["box",3]],["context",4]]],[11,"as_any","","",6,[[],["any",8]]],[11,"_cmp","","",6,[[["resolve",8]],[["option",4],["ordering",4]]]],[11,"_debug","","",6,[[["formatter",3]],["result",6]]],[11,"_clone","","",6,[[],[["resolve",8],["box",3]]]],[11,"_hash","","",6,[[["hasher",8]]]],[11,"_resolve","","",6,[[["box",3]]]],[11,"is_friendly_with","stdmath","",13,[[["resolve",8]]]],[11,"_as_context","","",13,[[["box",3]],["context",4]]],[11,"as_any","","",13,[[],["any",8]]],[11,"_cmp","","",13,[[["resolve",8]],[["option",4],["ordering",4]]]],[11,"_debug","","",13,[[["formatter",3]],["result",6]]],[11,"_clone","","",13,[[],[["resolve",8],["box",3]]]],[11,"_hash","","",13,[[["hasher",8]]]],[11,"_to_context","","",13,[[["box",3]],["context",4]]],[11,"_resolve","","",13,[[["box",3]]]],[11,"next","stdmath::core","",0,[[],["option",4]]],[11,"next","","",14,[[],["option",4]]],[11,"next","stdmath::exclude","",8,[[],["option",4]]],[11,"clone","stdmath::core","",0,[[],["type",4]]],[11,"clone","","",14,[[],["flippediteratoroftypes",3]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[]]],[11,"clone","stdmath::exclude","",7,[[],["overflowstate",4]]],[11,"clone","","",8,[[],["excludediterator",3]]],[11,"clone","stdmath","",13,[[],["factorial",3]]],[11,"cmp","stdmath::core","",0,[[["type",4]],["ordering",4]]],[11,"eq","","",0,[[["type",4]]]],[11,"ne","","",0,[[["type",4]]]],[11,"eq","","",3,[[]]],[11,"eq","","",4,[[["contextval",4]]]],[11,"ne","","",4,[[["contextval",4]]]],[11,"eq","","",5,[[]]],[11,"eq","","",6,[[["transformedvalue",3]]]],[11,"eq","stdmath","",13,[[["factorial",3]]]],[11,"ne","","",13,[[["factorial",3]]]],[11,"partial_cmp","stdmath::core","",0,[[["type",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["type",4]]]],[11,"le","","",0,[[["type",4]]]],[11,"gt","","",0,[[["type",4]]]],[11,"ge","","",0,[[["type",4]]]],[11,"partial_cmp","","",3,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",4,[[["contextval",4]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["contextval",4]]]],[11,"le","","",4,[[["contextval",4]]]],[11,"gt","","",4,[[["contextval",4]]]],[11,"ge","","",4,[[["contextval",4]]]],[11,"partial_cmp","","",5,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",6,[[["transformedvalue",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","stdmath","",13,[[["factorial",3]],[["option",4],["ordering",4]]]],[11,"lt","","",13,[[["factorial",3]]]],[11,"le","","",13,[[["factorial",3]]]],[11,"gt","","",13,[[["factorial",3]]]],[11,"ge","","",13,[[["factorial",3]]]],[11,"fmt","stdmath::core","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","stdmath","",13,[[["formatter",3]],["result",6]]],[11,"fmt","stdmath::core","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",5,[[]]],[11,"div","","",6,[[["context",4]]]],[11,"div","","",5,[[["transformedvalue",3]]]],[11,"div","","",6,[[["transformedvalue",3]]]],[11,"div","stdmath","",13,[[["context",4]]]],[11,"sub","stdmath::core","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",6,[[["context",4]]]],[11,"sub","","",5,[[["transformedvalue",3]]]],[11,"sub","","",6,[[["transformedvalue",3]]]],[11,"sub","stdmath","",13,[[["context",4]]]],[11,"add","stdmath::core","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",5,[[]]],[11,"add","","",6,[[["context",4]]]],[11,"add","","",5,[[["transformedvalue",3]]]],[11,"add","","",6,[[["transformedvalue",3]]]],[11,"add","stdmath","",13,[[["context",4]]]],[11,"mul","stdmath::core","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",6,[[["context",4]]]],[11,"mul","","",5,[[["transformedvalue",3]]]],[11,"mul","","",6,[[["transformedvalue",3]]]],[11,"mul","stdmath","",13,[[["context",4]]]],[11,"hash","stdmath::core","",0,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","stdmath","",13,[[]]]],"p":[[4,"Type"],[8,"Flippable"],[8,"Simplify"],[8,"Resolve"],[4,"ContextVal"],[4,"Context"],[3,"TransformedValue"],[4,"OverflowState"],[3,"ExcludedIterator"],[8,"ExcludedIteratorExt"],[8,"One"],[8,"Pow"],[8,"Zero"],[3,"Factorial"],[3,"FlippedIteratorOfTypes"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);